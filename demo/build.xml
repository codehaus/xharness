<?xml version="1.0"?>
<project name="XHarness tests" default="demo" basedir=".">

    <property name="results.dir" value="./results"/>
    <property name="latest.results.dir" value="${results.dir}/latest"/>
    <property name="xml.results.dir" value="${latest.results.dir}/xml"/>
    <property name="lib.dir" value="./lib"/>

    <loadfile property="xharness.version" srcFile="../pom.xml">
        <filterchain>
            <linecontains>
              <contains value="&lt;version&gt;"/>
            </linecontains>
            <headfilter lines="1"/>
            <striplinebreaks/>
            <tokenfilter>
                <replaceregex pattern="&lt;version&gt;(.+)&lt;/version&gt;" replace="\1"/>
                <trim/>
            </tokenfilter>
        </filterchain>
    </loadfile>

    <target name="build" depends="setup.classpath,setup.dirs">
        <mkdir dir="classes"/>
        <javac srcdir="src" destdir="classes" debug="true">
            <classpath refid="test.classpath"/>
        </javac>
    </target>

    <target name="demo" depends="build">
        <property name="test.pattern" value=""/>
        <property name="test.name" value="XHarnessDemo"/>
        
        <mkdir dir="${xml.results.dir}"/>
 
        <xharness name="${test.name}" resultsdir="${xml.results.dir}" basedir="." pattern="${test.pattern}">
            <include file="service_client.xml"/>
            <include file="client_server_service.xml"/>
      
            <testgroup name="Simple">
                <testcase name="ClientOnly">
                    <xh-java classname="test.standalone.HelloWorld" classpath="classes">
                      <arg value="Hi There"/>
                    </xh-java>
                    <assert message="Incorrect output">
                      <and>
                        <outputis stream="stderr"/>
                        <outputcontains>Hello World</outputcontains>
                        <outputcontains>Hi There</outputcontains>
                        <outputsize equals="2"/>
                      </and>
                    </assert>
                </testcase>
                <testcase name="ClientToServer">
                    <include file="client_server.xml"/>
                    <ClientServer/>
                </testcase>
                <testcase name="JUnit">
                    <mkdir dir="${latest.results.dir}/junit"/>
                    <junit showoutput="true">
                        <test name="test.junit.MyTest" todir="${latest.results.dir}/junit"/>
                        <classpath refid="test.classpath"/>
                        <formatter type="xml"/>
                    </junit>
                </testcase>
                <testcase name="NestedExec">
                    <delete file="countdown.properties" failonerror="false" />
                    <assert message="CountDown not reached" timeout="5">
                      <xh-java classname="test.standalone.CountDown" classpath="classes">
                        <arg line="5"/>
                      </xh-java>
                      <outputcontains>CountDown reached</outputcontains>
                    </assert>
                </testcase>
                <testcase name="AssertSubsection">
                    <echo>Hello World!
                          How are you today
                          On this sunny day?
                    </echo>
                    <assert>
                        <subsection beginregex="or" endregex="day" stream="warning">
                            <outputcontains string="you" />
                        </subsection>
                    </assert>
                </testcase>
            </testgroup>
      
            <testgroup name="BlockingServiceTests">
                <include file="blocking_service.xml"/>
                <testcase name="ClientToService">
                    <BlockingService/>
                    <ServiceClientOnly server.dir="temp/service1"/>
                </testcase>
      
                <testcase name="ClientToServerToService">
                    <BlockingService/>
                    <ServiceClientServer server.dir="temp/service1"/>
                </testcase>
            </testgroup>

            <testgroup name="NonblockingServiceTests">
                <include file="nonblocking_service.xml"/>
  
                <testcase name="ClientToNbService">
                    <NonblockingService/>
                    <ServiceClientOnly server.dir="temp/service2"/>
                </testcase>
      
                <testcase name="ClientToServerToNbService">
                    <service reference="NonblockingService"/>
                    <ServiceClientServer server.dir="temp/service2"/>
                </testcase>
            </testgroup>
            
            <delete quiet="true" dir="temp"/>
        </xharness>

        <antcall target="generate.report"/>
    </target>
  
    <target name="generate.report">
        <mkdir dir="${latest.results.dir}/html"/>
        
        <xharnessreport todir="${latest.results.dir}/html" failonerror="true">
            <fileset dir="${xml.results.dir}">
                <include name="*.xml"/>
            </fileset>
            <report format="frames" todir="${latest.results.dir}/html"/>
        </xharnessreport>
    </target>
  
    <target name="clean">
        <delete quiet="true" dir="classes"/>
        <delete quiet="true" dir="temp"/>
    </target>
  
    <target name="results.clean">
        <delete quiet="true" dir="${results.dir}"/>
    </target>
  
    <target name="dist.clean" depends="clean,results.clean">
        <delete quiet="true" dir="${lib.dir}"/>
    </target>

    <target name="setup.dirs">
        <mkdir dir="${results.dir}"/>
        <available file="${latest.results.dir}" type="dir" property="results.dir.exists"/>
        <antcall target="save.results.dir"/>
        <mkdir dir="${latest.results.dir}"/>
    </target>
    
    <target name="setup.classpath">
        <property name="target.dir" value="../target"/>
        <available property="xharness.jar.available" file="${target.dir}/xharness-${xharness.version}.jar" />
        <antcall target="download.xharness.jar" />
        
        <path id="xharness.lib">
            <fileset dir="..">
              <include name="target/*.jar"/>
            </fileset>
            <pathelement path="${java.class.path}"/>
        </path>
        
        <taskdef resource="xharnesstasks.properties" classpathref="xharness.lib" loaderref="xharness.loader"/>
        <typedef resource="xharnesstypes.properties" classpathref="xharness.lib" loaderref="xharness.loader"/>
          
        <path id="test.classpath">
            <pathelement location="${lib.dir}/junit.jar" />
            <pathelement location="./classes" />
        </path>
        
        <available property="junit.jar.available" file="${lib.dir}/junit.jar" />
        
        <antcall target="download.junit.jar" />

    </target>
    
    <target name="download.xharness.jar" unless="xharness.jar.available">
        <condition property="xharness.maven.repo" value="http://snapshots.repository.codehaus.org">
            <contains string="${xharness.version}" substring="SNAPSHOT" casesensitive="true" />
        </condition>
        <property name="xharness.maven.repo" value="http://repo2.maven.org/maven2" />
        <mkdir dir="${target.dir}"/>
        <get src="${xharness.maven.repo}/org/codehaus/xharness/xharness/${xharness.version}/xharness-${xharness.version}.jar" 
             dest="${target.dir}/xharness-${xharness.version}.jar" />
    </target>

    <target name="download.junit.jar" unless="junit.jar.available">
        <mkdir dir="${lib.dir}"/>
        <get src="http://repo2.maven.org/maven2/junit/junit/3.8.2/junit-3.8.2.jar" 
             dest="${lib.dir}/junit.jar" />
    </target>

    <target name="save.results.dir" if="results.dir.exists">
        <tstamp>
            <format property="backup.dest.dir" pattern="yyyy-MM-dd-hh-mm-ss" unit="second"/>
        </tstamp>
        <move todir="${results.dir}/${backup.dest.dir}">
            <fileset dir="${latest.results.dir}"/>
        </move>
    </target>
  
</project>
